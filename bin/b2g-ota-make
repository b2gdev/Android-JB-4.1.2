#!/bin/sh
. "$(dirname "${0}")/b2g-prologue.sh"
includeShellDefinitions b2g-build
includeShellDefinitions b2g-strings

readonly defaultArchiveName="OTA"
readonly defaultHeapSize="1500M"

readonly archiveExtension="zip"

showHelp() {
cat <<END_HELP
usage: ${scriptName} [option ...]
-h       Show this usage summary on standard output, and then exit.
-m size  Specify the Java memory size (defaults to ${defaultHeapSize}).
-n name  Specify the archive name (defaults to ${defaultArchiveName}).
-s       Invoke an interactive shell to inspect/modify the archive.
END_HELP
}

printLine() {
  local line="${1}"

  echo "ui_print(\"${line}\");"
}

printBanner() {
  line1="${ownerName}"
  line2="B2G OTA $(showBuildIdentifier)"

  local length1="${#line1}"
  local length2="${#line2}"
  local length=$(((length1 > length2)? length1: length2))

  local horizontal="*"
  local vertical="|"

  local border
  replicateString border "${horizontal}" $((length + 4))

  centerString line1 "${length}"
  centerString line2 "${length}"

  local prefix="${vertical} "
  local suffix=" ${vertical}"

  printLine "${border}"
  printLine "${prefix}${line1}${suffix}"
  printLine "${prefix}${line2}${suffix}"
  printLine "${border}"
}

makeDirectory() {
  local directory="${1}"

  mkdir -p "${directory}"
}

getFile() {
  local file="${1}"

  [ "${file}" = "${file#/}" ] && file="${buildDirectory}/${file}"
  cp "${file}" .
}

getExecutable() {
  local program="${1}"

  getFile "tcbin_misc/executables/${program}"
  chmod a+rx "${program}"
}

archiveName=""
heapSize=""
invokeShell=false

handleOption_m() {
  heapSize="${OPTARG}"
}

handleOption_n() {
  archiveName="${OPTARG}"
}

handleOption_s() {
  invokeShell=true
}

handleArguments "hm:n:s" "${@}"
[ -n "${heapSize}" ] || heapSize="${defaultHeapSize}"

[ -n "${archiveName}" ] || archiveName="${defaultArchiveName}"
[ "${archiveName}" = "${archiveName#/}" ] && archiveName="${initialDirectory}/${archiveName}"
[ "${archiveName}" = "${archiveName%/}" ] || syntaxError "invalid archive name: ${archiveName}"

setBuildDirectory
needTemporaryDirectory

edifyExtension="upd"
edifyDirectory="${temporaryDirectory}/edify"
makeDirectory "${edifyDirectory}"

cd "${buildDirectory}"
printBanner >"${edifyDirectory}/00.${edifyExtension}"

cd "${edifyDirectory}"
cp "${scriptDirectory}/"*".${edifyExtension}" .

updateDirectory="${temporaryDirectory}/update"
makeDirectory "${updateDirectory}"

metaDirectory="${updateDirectory}/META-INF/com/google/android"
makeDirectory "${metaDirectory}"

systemDirectory="${updateDirectory}/system"
makeDirectory "${systemDirectory}"

dataDirectory="${updateDirectory}/data"
makeDirectory "${dataDirectory}"

cd "${updateDirectory}"
getFile "${bootImage}"
getFile "${androidImage}"
getFile "${recoveryImage}"
getFile "${systemImage}"
getExecutable "setup_3g_audio"

cd "${metaDirectory}"
getFile "${scriptDirectory}/update-binary"
cat "${edifyDirectory}/"* >"updater-script"

"${invokeShell}" && {
  programMessage "invoking interactive shell"
  cd "${updateDirectory}"
  export "PS1=${programName}> "
  "${SHELL:-/bin/sh}" || :
}

programMessage "creating archive"
cd "${updateDirectory}"

readonly unsignedArchive="unsigned.${archiveExtension}"
zip -q -9 -r "${temporaryDirectory}/${unsignedArchive}" *

programMessage "signing archive"
cd "${temporaryDirectory}"

readonly signingJar="signapk.jar"
getFile "out/host/linux-x86/framework/${signingJar}"

readonly keyName="release"
readonly keyExtension="pk8"
readonly certificateExtension="x509.pem"

for extension in "${keyExtension}" "${certificateExtension}"
do
  getFile "device/ti/beagleboard/security/${keyName}.${extension}"
done

readonly signedArchive="${archiveName}.${archiveExtension}"
java "-Xmx${heapSize}" -jar "${signingJar}" -w \
     "${keyName}.${certificateExtension}" \
     "${keyName}.${keyExtension}" \
     "${unsignedArchive}" "${signedArchive}"

programMessage "done"
exit 0
